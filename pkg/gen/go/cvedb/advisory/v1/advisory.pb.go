// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cvedb/advisory/v1/advisory.proto

package advisoryv1

import (
	bytes "bytes"
	encoding_binary "encoding/binary"
	fmt "fmt"
	io "io"
	math "math"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Advisory represents a software vulnerability.
type Advisory struct {
	Id                   string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Description          map[string]string `protobuf:"bytes,2,rep,name=description,proto3" json:"description,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Score                float64           `protobuf:"fixed64,3,opt,name=score,proto3" json:"score,omitempty"`
	PublishedTime        *types.Timestamp  `protobuf:"bytes,4,opt,name=published_time,json=publishedTime,proto3" json:"published_time,omitempty"`
	LastModifiedTime     *types.Timestamp  `protobuf:"bytes,5,opt,name=last_modified_time,json=lastModifiedTime,proto3" json:"last_modified_time,omitempty"`
	Cve                  string            `protobuf:"bytes,6,opt,name=cve,proto3" json:"cve,omitempty"`
	Cvss                 *CVSS             `protobuf:"bytes,7,opt,name=cvss,proto3" json:"cvss,omitempty"`
	Cwes                 []string          `protobuf:"bytes,8,rep,name=cwes,proto3" json:"cwes,omitempty"`
	Refs                 []*Reference      `protobuf:"bytes,9,rep,name=refs,proto3" json:"refs,omitempty"`
	Affects              []*Affect         `protobuf:"bytes,10,rep,name=affects,proto3" json:"affects,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Advisory) Reset()         { *m = Advisory{} }
func (m *Advisory) String() string { return proto.CompactTextString(m) }
func (*Advisory) ProtoMessage()    {}
func (*Advisory) Descriptor() ([]byte, []int) {
	return fileDescriptor_de48a4f32f93b4ff, []int{0}
}

func (m *Advisory) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *Advisory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Advisory.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *Advisory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Advisory.Merge(m, src)
}

func (m *Advisory) XXX_Size() int {
	return m.Size()
}

func (m *Advisory) XXX_DiscardUnknown() {
	xxx_messageInfo_Advisory.DiscardUnknown(m)
}

var xxx_messageInfo_Advisory proto.InternalMessageInfo

func (m *Advisory) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Advisory) GetDescription() map[string]string {
	if m != nil {
		return m.Description
	}
	return nil
}

func (m *Advisory) GetScore() float64 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *Advisory) GetPublishedTime() *types.Timestamp {
	if m != nil {
		return m.PublishedTime
	}
	return nil
}

func (m *Advisory) GetLastModifiedTime() *types.Timestamp {
	if m != nil {
		return m.LastModifiedTime
	}
	return nil
}

func (m *Advisory) GetCve() string {
	if m != nil {
		return m.Cve
	}
	return ""
}

func (m *Advisory) GetCvss() *CVSS {
	if m != nil {
		return m.Cvss
	}
	return nil
}

func (m *Advisory) GetCwes() []string {
	if m != nil {
		return m.Cwes
	}
	return nil
}

func (m *Advisory) GetRefs() []*Reference {
	if m != nil {
		return m.Refs
	}
	return nil
}

func (m *Advisory) GetAffects() []*Affect {
	if m != nil {
		return m.Affects
	}
	return nil
}

// CVSS represents advisory score according CVSS version.
type CVSS struct {
	V2                   *CVSSComponent `protobuf:"bytes,1,opt,name=v2,proto3" json:"v2,omitempty"`
	V3                   *CVSSComponent `protobuf:"bytes,2,opt,name=v3,proto3" json:"v3,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *CVSS) Reset()         { *m = CVSS{} }
func (m *CVSS) String() string { return proto.CompactTextString(m) }
func (*CVSS) ProtoMessage()    {}
func (*CVSS) Descriptor() ([]byte, []int) {
	return fileDescriptor_de48a4f32f93b4ff, []int{1}
}

func (m *CVSS) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *CVSS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CVSS.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *CVSS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CVSS.Merge(m, src)
}

func (m *CVSS) XXX_Size() int {
	return m.Size()
}

func (m *CVSS) XXX_DiscardUnknown() {
	xxx_messageInfo_CVSS.DiscardUnknown(m)
}

var xxx_messageInfo_CVSS proto.InternalMessageInfo

func (m *CVSS) GetV2() *CVSSComponent {
	if m != nil {
		return m.V2
	}
	return nil
}

func (m *CVSS) GetV3() *CVSSComponent {
	if m != nil {
		return m.V3
	}
	return nil
}

// CVSSComponent is an element that stores vector string and score for a given CVSS version.
type CVSSComponent struct {
	Version              string   `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Vector               string   `protobuf:"bytes,2,opt,name=vector,proto3" json:"vector,omitempty"`
	Score                float64  `protobuf:"fixed64,3,opt,name=score,proto3" json:"score,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CVSSComponent) Reset()         { *m = CVSSComponent{} }
func (m *CVSSComponent) String() string { return proto.CompactTextString(m) }
func (*CVSSComponent) ProtoMessage()    {}
func (*CVSSComponent) Descriptor() ([]byte, []int) {
	return fileDescriptor_de48a4f32f93b4ff, []int{2}
}

func (m *CVSSComponent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *CVSSComponent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CVSSComponent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *CVSSComponent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CVSSComponent.Merge(m, src)
}

func (m *CVSSComponent) XXX_Size() int {
	return m.Size()
}

func (m *CVSSComponent) XXX_DiscardUnknown() {
	xxx_messageInfo_CVSSComponent.DiscardUnknown(m)
}

var xxx_messageInfo_CVSSComponent proto.InternalMessageInfo

func (m *CVSSComponent) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *CVSSComponent) GetVector() string {
	if m != nil {
		return m.Vector
	}
	return ""
}

func (m *CVSSComponent) GetScore() float64 {
	if m != nil {
		return m.Score
	}
	return 0
}

// Reference is additionnal information for an advisory.
type Reference struct {
	Link                 string   `protobuf:"bytes,1,opt,name=link,proto3" json:"link,omitempty"`
	Source               string   `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	Name                 string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Tags                 []string `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Reference) Reset()         { *m = Reference{} }
func (m *Reference) String() string { return proto.CompactTextString(m) }
func (*Reference) ProtoMessage()    {}
func (*Reference) Descriptor() ([]byte, []int) {
	return fileDescriptor_de48a4f32f93b4ff, []int{3}
}

func (m *Reference) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *Reference) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Reference.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *Reference) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Reference.Merge(m, src)
}

func (m *Reference) XXX_Size() int {
	return m.Size()
}

func (m *Reference) XXX_DiscardUnknown() {
	xxx_messageInfo_Reference.DiscardUnknown(m)
}

var xxx_messageInfo_Reference proto.InternalMessageInfo

func (m *Reference) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

func (m *Reference) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *Reference) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Reference) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

// Affect is a element that indicates which vendor/product/version is concerned
// by the advisory.
type Affect struct {
	Vendor               string   `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	Product              string   `protobuf:"bytes,2,opt,name=product,proto3" json:"product,omitempty"`
	Version              string   `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Affect) Reset()         { *m = Affect{} }
func (m *Affect) String() string { return proto.CompactTextString(m) }
func (*Affect) ProtoMessage()    {}
func (*Affect) Descriptor() ([]byte, []int) {
	return fileDescriptor_de48a4f32f93b4ff, []int{4}
}

func (m *Affect) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *Affect) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Affect.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *Affect) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Affect.Merge(m, src)
}

func (m *Affect) XXX_Size() int {
	return m.Size()
}

func (m *Affect) XXX_DiscardUnknown() {
	xxx_messageInfo_Affect.DiscardUnknown(m)
}

var xxx_messageInfo_Affect proto.InternalMessageInfo

func (m *Affect) GetVendor() string {
	if m != nil {
		return m.Vendor
	}
	return ""
}

func (m *Affect) GetProduct() string {
	if m != nil {
		return m.Product
	}
	return ""
}

func (m *Affect) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func init() {
	proto.RegisterType((*Advisory)(nil), "cvedb.advisory.v1.Advisory")
	proto.RegisterMapType((map[string]string)(nil), "cvedb.advisory.v1.Advisory.DescriptionEntry")
	proto.RegisterType((*CVSS)(nil), "cvedb.advisory.v1.CVSS")
	proto.RegisterType((*CVSSComponent)(nil), "cvedb.advisory.v1.CVSSComponent")
	proto.RegisterType((*Reference)(nil), "cvedb.advisory.v1.Reference")
	proto.RegisterType((*Affect)(nil), "cvedb.advisory.v1.Affect")
}

func init() { proto.RegisterFile("cvedb/advisory/v1/advisory.proto", fileDescriptor_de48a4f32f93b4ff) }

var fileDescriptor_de48a4f32f93b4ff = []byte{
	// 605 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0x41, 0x6f, 0xd3, 0x3c,
	0x18, 0x96, 0xd3, 0xac, 0x5b, 0x5d, 0x6d, 0xda, 0xac, 0x4f, 0x1f, 0xa6, 0x42, 0x21, 0xea, 0xa9,
	0x12, 0x90, 0xae, 0xed, 0x05, 0x71, 0x40, 0xda, 0x0a, 0x12, 0x17, 0xd0, 0x94, 0x4d, 0x03, 0xa1,
	0x49, 0x53, 0xea, 0x38, 0x99, 0x59, 0x13, 0x47, 0xb6, 0x63, 0x34, 0x2e, 0x1c, 0xf9, 0x1f, 0x9c,
	0x10, 0xbf, 0x04, 0x71, 0xe2, 0x27, 0x40, 0x7f, 0x05, 0x47, 0x64, 0x27, 0xe9, 0x36, 0x56, 0x04,
	0xb7, 0xf7, 0x79, 0xf3, 0xbc, 0x4f, 0x9e, 0xf7, 0xb1, 0x0d, 0x7d, 0xa2, 0x69, 0x3c, 0x1b, 0x46,
	0xb1, 0x66, 0x92, 0x8b, 0x8b, 0xa1, 0x1e, 0x2d, 0xeb, 0xa0, 0x10, 0x5c, 0x71, 0xb4, 0x63, 0x19,
	0xc1, 0xb2, 0xab, 0x47, 0xbd, 0x07, 0x29, 0x53, 0x67, 0xe5, 0x2c, 0x20, 0x3c, 0x1b, 0xa6, 0x3c,
	0xe5, 0x43, 0xcb, 0x9c, 0x95, 0x89, 0x45, 0x16, 0xd8, 0xaa, 0x52, 0xe8, 0xdd, 0x4d, 0x39, 0x4f,
	0xe7, 0xf4, 0x92, 0xa5, 0x58, 0x46, 0xa5, 0x8a, 0xb2, 0xa2, 0x22, 0xf4, 0x3f, 0xb8, 0x70, 0x63,
	0xaf, 0xd6, 0x47, 0x5b, 0xd0, 0x61, 0x31, 0x06, 0x3e, 0x18, 0x74, 0x42, 0x87, 0xc5, 0xe8, 0x05,
	0xec, 0xc6, 0x54, 0x12, 0xc1, 0x0a, 0xc5, 0x78, 0x8e, 0x1d, 0xbf, 0x35, 0xe8, 0x8e, 0xef, 0x07,
	0x37, 0x5c, 0x05, 0x8d, 0x42, 0xf0, 0xe4, 0x92, 0xfe, 0x34, 0x57, 0xe2, 0x22, 0xbc, 0x2a, 0x80,
	0xfe, 0x83, 0x6b, 0x92, 0x70, 0x41, 0x71, 0xcb, 0x07, 0x03, 0x10, 0x56, 0x00, 0xed, 0xc1, 0xad,
	0xa2, 0x9c, 0xcd, 0x99, 0x3c, 0xa3, 0xf1, 0xa9, 0xf1, 0x87, 0x5d, 0x1f, 0x0c, 0xba, 0xe3, 0x5e,
	0x50, 0x99, 0x0f, 0x1a, 0xf3, 0xc1, 0x51, 0x63, 0x3e, 0xdc, 0x5c, 0x4e, 0x98, 0x1e, 0x7a, 0x06,
	0xd1, 0x3c, 0x92, 0xea, 0x34, 0xe3, 0x31, 0x4b, 0x58, 0x23, 0xb3, 0xf6, 0x57, 0x99, 0x6d, 0x33,
	0xf5, 0xbc, 0x1e, 0xb2, 0x4a, 0xdb, 0xb0, 0x45, 0x34, 0xc5, 0x6d, 0x9b, 0x81, 0x29, 0xd1, 0x3d,
	0xe8, 0x12, 0x2d, 0x25, 0x5e, 0xb7, 0x6a, 0xb7, 0x56, 0x6c, 0x3f, 0x3d, 0x3e, 0x3c, 0x0c, 0x2d,
	0x09, 0x21, 0xe8, 0x92, 0xb7, 0x54, 0xe2, 0x0d, 0xbf, 0x35, 0xe8, 0x84, 0xb6, 0x46, 0xbb, 0xd0,
	0x15, 0x34, 0x91, 0xb8, 0x63, 0xe3, 0xbb, 0xb3, 0x42, 0x20, 0xa4, 0x09, 0x15, 0x34, 0x27, 0x34,
	0xb4, 0x4c, 0x34, 0x81, 0xeb, 0x51, 0x92, 0x50, 0xa2, 0x24, 0x86, 0x76, 0xe8, 0xf6, 0xaa, 0xcc,
	0x2d, 0x23, 0x6c, 0x98, 0xbd, 0xc7, 0x70, 0xfb, 0xf7, 0xf4, 0xcd, 0x36, 0xe7, 0xf4, 0xa2, 0x3e,
	0x51, 0x53, 0x9a, 0x23, 0xd0, 0xd1, 0xbc, 0xa4, 0xd8, 0xb1, 0xbd, 0x0a, 0x3c, 0x72, 0x1e, 0x82,
	0xfe, 0x1b, 0xe8, 0x9a, 0x45, 0xd0, 0x2e, 0x74, 0xf4, 0xd8, 0x8e, 0x74, 0xc7, 0xfe, 0x1f, 0xb6,
	0x9d, 0xf2, 0xac, 0xe0, 0x39, 0xcd, 0x55, 0xe8, 0xe8, 0xb1, 0x9d, 0x98, 0x58, 0xc1, 0x7f, 0x9b,
	0x98, 0xf4, 0x5f, 0xc2, 0xcd, 0x6b, 0x4d, 0x84, 0xe1, 0xba, 0xa6, 0x42, 0x9a, 0x5b, 0x56, 0x99,
	0x6d, 0x20, 0xfa, 0x1f, 0xb6, 0x35, 0x25, 0x8a, 0x8b, 0xda, 0x71, 0x8d, 0x56, 0xdf, 0xa5, 0xfe,
	0x29, 0xec, 0x2c, 0xc3, 0x34, 0x87, 0x31, 0x67, 0xf9, 0x79, 0xad, 0x68, 0x6b, 0x23, 0x27, 0x79,
	0x29, 0x48, 0x13, 0x40, 0x8d, 0x0c, 0x37, 0x8f, 0xb2, 0x4a, 0xad, 0x13, 0xda, 0xda, 0xf4, 0x54,
	0x94, 0x4a, 0xec, 0x56, 0x87, 0x69, 0xea, 0xfe, 0x11, 0x6c, 0x57, 0xc1, 0x57, 0xc6, 0xf2, 0x98,
	0x8b, 0x5a, 0xbf, 0x46, 0x66, 0x95, 0x42, 0xf0, 0xb8, 0x24, 0xaa, 0xfe, 0x45, 0x03, 0xaf, 0x2e,
	0xd9, 0xba, 0xb6, 0xe4, 0xfe, 0xfb, 0x9f, 0x3f, 0x3c, 0xf0, 0x69, 0xe1, 0x81, 0x2f, 0x0b, 0x0f,
	0x7c, 0x5b, 0x78, 0xe0, 0xfb, 0xc2, 0x03, 0xd0, 0xe3, 0x22, 0x0d, 0xde, 0xd1, 0x9c, 0xa9, 0xb3,
	0x48, 0xdc, 0xcc, 0x75, 0x7f, 0xb3, 0x79, 0x76, 0x07, 0xe6, 0x66, 0x1f, 0x80, 0xd7, 0xb0, 0xf9,
	0xaa, 0x47, 0x1f, 0x9d, 0xd6, 0x74, 0xef, 0xd5, 0x67, 0x67, 0x67, 0x6a, 0xc7, 0x96, 0x0f, 0xf4,
	0x78, 0xf4, 0xb5, 0xee, 0x9d, 0x34, 0xbd, 0x93, 0xe3, 0xd1, 0xac, 0x6d, 0x1f, 0xc7, 0xe4, 0x57,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x3a, 0xb9, 0x00, 0x8e, 0x94, 0x04, 0x00, 0x00,
}

func (this *Advisory) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Advisory)
	if !ok {
		that2, ok := that.(Advisory)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if len(this.Description) != len(that1.Description) {
		return false
	}
	for i := range this.Description {
		if this.Description[i] != that1.Description[i] {
			return false
		}
	}
	if this.Score != that1.Score {
		return false
	}
	if !this.PublishedTime.Equal(that1.PublishedTime) {
		return false
	}
	if !this.LastModifiedTime.Equal(that1.LastModifiedTime) {
		return false
	}
	if this.Cve != that1.Cve {
		return false
	}
	if !this.Cvss.Equal(that1.Cvss) {
		return false
	}
	if len(this.Cwes) != len(that1.Cwes) {
		return false
	}
	for i := range this.Cwes {
		if this.Cwes[i] != that1.Cwes[i] {
			return false
		}
	}
	if len(this.Refs) != len(that1.Refs) {
		return false
	}
	for i := range this.Refs {
		if !this.Refs[i].Equal(that1.Refs[i]) {
			return false
		}
	}
	if len(this.Affects) != len(that1.Affects) {
		return false
	}
	for i := range this.Affects {
		if !this.Affects[i].Equal(that1.Affects[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}

func (this *CVSS) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CVSS)
	if !ok {
		that2, ok := that.(CVSS)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.V2.Equal(that1.V2) {
		return false
	}
	if !this.V3.Equal(that1.V3) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}

func (this *CVSSComponent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CVSSComponent)
	if !ok {
		that2, ok := that.(CVSSComponent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if this.Vector != that1.Vector {
		return false
	}
	if this.Score != that1.Score {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}

func (this *Reference) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Reference)
	if !ok {
		that2, ok := that.(Reference)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Link != that1.Link {
		return false
	}
	if this.Source != that1.Source {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.Tags) != len(that1.Tags) {
		return false
	}
	for i := range this.Tags {
		if this.Tags[i] != that1.Tags[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}

func (this *Affect) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Affect)
	if !ok {
		that2, ok := that.(Affect)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Vendor != that1.Vendor {
		return false
	}
	if this.Product != that1.Product {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}

func (m *Advisory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Advisory) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAdvisory(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Description) > 0 {
		for k := range m.Description {
			dAtA[i] = 0x12
			i++
			v := m.Description[k]
			mapSize := 1 + len(k) + sovAdvisory(uint64(len(k))) + 1 + len(v) + sovAdvisory(uint64(len(v)))
			i = encodeVarintAdvisory(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintAdvisory(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintAdvisory(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if m.Score != 0 {
		dAtA[i] = 0x19
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Score))))
		i += 8
	}
	if m.PublishedTime != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAdvisory(dAtA, i, uint64(m.PublishedTime.Size()))
		n1, err := m.PublishedTime.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.LastModifiedTime != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintAdvisory(dAtA, i, uint64(m.LastModifiedTime.Size()))
		n2, err := m.LastModifiedTime.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.Cve) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintAdvisory(dAtA, i, uint64(len(m.Cve)))
		i += copy(dAtA[i:], m.Cve)
	}
	if m.Cvss != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintAdvisory(dAtA, i, uint64(m.Cvss.Size()))
		n3, err := m.Cvss.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if len(m.Cwes) > 0 {
		for _, s := range m.Cwes {
			dAtA[i] = 0x42
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Refs) > 0 {
		for _, msg := range m.Refs {
			dAtA[i] = 0x4a
			i++
			i = encodeVarintAdvisory(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Affects) > 0 {
		for _, msg := range m.Affects {
			dAtA[i] = 0x52
			i++
			i = encodeVarintAdvisory(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CVSS) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CVSS) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.V2 != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAdvisory(dAtA, i, uint64(m.V2.Size()))
		n4, err := m.V2.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.V3 != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAdvisory(dAtA, i, uint64(m.V3.Size()))
		n5, err := m.V3.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CVSSComponent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CVSSComponent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Version) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAdvisory(dAtA, i, uint64(len(m.Version)))
		i += copy(dAtA[i:], m.Version)
	}
	if len(m.Vector) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAdvisory(dAtA, i, uint64(len(m.Vector)))
		i += copy(dAtA[i:], m.Vector)
	}
	if m.Score != 0 {
		dAtA[i] = 0x19
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Score))))
		i += 8
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Reference) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Reference) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Link) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAdvisory(dAtA, i, uint64(len(m.Link)))
		i += copy(dAtA[i:], m.Link)
	}
	if len(m.Source) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAdvisory(dAtA, i, uint64(len(m.Source)))
		i += copy(dAtA[i:], m.Source)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAdvisory(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Affect) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Affect) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Vendor) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAdvisory(dAtA, i, uint64(len(m.Vendor)))
		i += copy(dAtA[i:], m.Vendor)
	}
	if len(m.Product) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAdvisory(dAtA, i, uint64(len(m.Product)))
		i += copy(dAtA[i:], m.Product)
	}
	if len(m.Version) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAdvisory(dAtA, i, uint64(len(m.Version)))
		i += copy(dAtA[i:], m.Version)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintAdvisory(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}

func NewPopulatedAdvisory(r randyAdvisory, easy bool) *Advisory {
	this := &Advisory{}
	this.Id = string(randStringAdvisory(r))
	if r.Intn(10) != 0 {
		v1 := r.Intn(10)
		this.Description = make(map[string]string)
		for i := 0; i < v1; i++ {
			this.Description[randStringAdvisory(r)] = randStringAdvisory(r)
		}
	}
	this.Score = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.Score *= -1
	}
	if r.Intn(10) != 0 {
		this.PublishedTime = types.NewPopulatedTimestamp(r, easy)
	}
	if r.Intn(10) != 0 {
		this.LastModifiedTime = types.NewPopulatedTimestamp(r, easy)
	}
	this.Cve = string(randStringAdvisory(r))
	if r.Intn(10) != 0 {
		this.Cvss = NewPopulatedCVSS(r, easy)
	}
	v2 := r.Intn(10)
	this.Cwes = make([]string, v2)
	for i := 0; i < v2; i++ {
		this.Cwes[i] = string(randStringAdvisory(r))
	}
	if r.Intn(10) != 0 {
		v3 := r.Intn(5)
		this.Refs = make([]*Reference, v3)
		for i := 0; i < v3; i++ {
			this.Refs[i] = NewPopulatedReference(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v4 := r.Intn(5)
		this.Affects = make([]*Affect, v4)
		for i := 0; i < v4; i++ {
			this.Affects[i] = NewPopulatedAffect(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedAdvisory(r, 11)
	}
	return this
}

func NewPopulatedCVSS(r randyAdvisory, easy bool) *CVSS {
	this := &CVSS{}
	if r.Intn(10) != 0 {
		this.V2 = NewPopulatedCVSSComponent(r, easy)
	}
	if r.Intn(10) != 0 {
		this.V3 = NewPopulatedCVSSComponent(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedAdvisory(r, 3)
	}
	return this
}

func NewPopulatedCVSSComponent(r randyAdvisory, easy bool) *CVSSComponent {
	this := &CVSSComponent{}
	this.Version = string(randStringAdvisory(r))
	this.Vector = string(randStringAdvisory(r))
	this.Score = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.Score *= -1
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedAdvisory(r, 4)
	}
	return this
}

func NewPopulatedReference(r randyAdvisory, easy bool) *Reference {
	this := &Reference{}
	this.Link = string(randStringAdvisory(r))
	this.Source = string(randStringAdvisory(r))
	this.Name = string(randStringAdvisory(r))
	v5 := r.Intn(10)
	this.Tags = make([]string, v5)
	for i := 0; i < v5; i++ {
		this.Tags[i] = string(randStringAdvisory(r))
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedAdvisory(r, 5)
	}
	return this
}

func NewPopulatedAffect(r randyAdvisory, easy bool) *Affect {
	this := &Affect{}
	this.Vendor = string(randStringAdvisory(r))
	this.Product = string(randStringAdvisory(r))
	this.Version = string(randStringAdvisory(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedAdvisory(r, 4)
	}
	return this
}

type randyAdvisory interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneAdvisory(r randyAdvisory) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}

func randStringAdvisory(r randyAdvisory) string {
	v6 := r.Intn(100)
	tmps := make([]rune, v6)
	for i := 0; i < v6; i++ {
		tmps[i] = randUTF8RuneAdvisory(r)
	}
	return string(tmps)
}

func randUnrecognizedAdvisory(r randyAdvisory, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldAdvisory(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}

func randFieldAdvisory(dAtA []byte, r randyAdvisory, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateAdvisory(dAtA, uint64(key))
		v7 := r.Int63()
		if r.Intn(2) == 0 {
			v7 *= -1
		}
		dAtA = encodeVarintPopulateAdvisory(dAtA, uint64(v7))
	case 1:
		dAtA = encodeVarintPopulateAdvisory(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateAdvisory(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateAdvisory(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateAdvisory(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}

func encodeVarintPopulateAdvisory(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}

func (m *Advisory) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovAdvisory(uint64(l))
	}
	if len(m.Description) > 0 {
		for k, v := range m.Description {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovAdvisory(uint64(len(k))) + 1 + len(v) + sovAdvisory(uint64(len(v)))
			n += mapEntrySize + 1 + sovAdvisory(uint64(mapEntrySize))
		}
	}
	if m.Score != 0 {
		n += 9
	}
	if m.PublishedTime != nil {
		l = m.PublishedTime.Size()
		n += 1 + l + sovAdvisory(uint64(l))
	}
	if m.LastModifiedTime != nil {
		l = m.LastModifiedTime.Size()
		n += 1 + l + sovAdvisory(uint64(l))
	}
	l = len(m.Cve)
	if l > 0 {
		n += 1 + l + sovAdvisory(uint64(l))
	}
	if m.Cvss != nil {
		l = m.Cvss.Size()
		n += 1 + l + sovAdvisory(uint64(l))
	}
	if len(m.Cwes) > 0 {
		for _, s := range m.Cwes {
			l = len(s)
			n += 1 + l + sovAdvisory(uint64(l))
		}
	}
	if len(m.Refs) > 0 {
		for _, e := range m.Refs {
			l = e.Size()
			n += 1 + l + sovAdvisory(uint64(l))
		}
	}
	if len(m.Affects) > 0 {
		for _, e := range m.Affects {
			l = e.Size()
			n += 1 + l + sovAdvisory(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CVSS) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.V2 != nil {
		l = m.V2.Size()
		n += 1 + l + sovAdvisory(uint64(l))
	}
	if m.V3 != nil {
		l = m.V3.Size()
		n += 1 + l + sovAdvisory(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CVSSComponent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovAdvisory(uint64(l))
	}
	l = len(m.Vector)
	if l > 0 {
		n += 1 + l + sovAdvisory(uint64(l))
	}
	if m.Score != 0 {
		n += 9
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Reference) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Link)
	if l > 0 {
		n += 1 + l + sovAdvisory(uint64(l))
	}
	l = len(m.Source)
	if l > 0 {
		n += 1 + l + sovAdvisory(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAdvisory(uint64(l))
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			l = len(s)
			n += 1 + l + sovAdvisory(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Affect) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Vendor)
	if l > 0 {
		n += 1 + l + sovAdvisory(uint64(l))
	}
	l = len(m.Product)
	if l > 0 {
		n += 1 + l + sovAdvisory(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovAdvisory(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovAdvisory(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}

func sozAdvisory(x uint64) (n int) {
	return sovAdvisory(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}

func (m *Advisory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdvisory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Advisory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Advisory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdvisory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdvisory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdvisory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdvisory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdvisory
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdvisory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Description == nil {
				m.Description = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAdvisory
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAdvisory
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthAdvisory
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthAdvisory
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAdvisory
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthAdvisory
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthAdvisory
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipAdvisory(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthAdvisory
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Description[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Score = float64(math.Float64frombits(v))
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublishedTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdvisory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdvisory
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdvisory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PublishedTime == nil {
				m.PublishedTime = &types.Timestamp{}
			}
			if err := m.PublishedTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastModifiedTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdvisory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdvisory
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdvisory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastModifiedTime == nil {
				m.LastModifiedTime = &types.Timestamp{}
			}
			if err := m.LastModifiedTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cve", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdvisory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdvisory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdvisory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cve = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cvss", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdvisory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdvisory
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdvisory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cvss == nil {
				m.Cvss = &CVSS{}
			}
			if err := m.Cvss.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cwes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdvisory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdvisory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdvisory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cwes = append(m.Cwes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Refs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdvisory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdvisory
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdvisory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Refs = append(m.Refs, &Reference{})
			if err := m.Refs[len(m.Refs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Affects", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdvisory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdvisory
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdvisory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Affects = append(m.Affects, &Affect{})
			if err := m.Affects[len(m.Affects)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdvisory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdvisory
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdvisory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *CVSS) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdvisory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CVSS: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CVSS: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field V2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdvisory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdvisory
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdvisory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.V2 == nil {
				m.V2 = &CVSSComponent{}
			}
			if err := m.V2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field V3", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdvisory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdvisory
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdvisory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.V3 == nil {
				m.V3 = &CVSSComponent{}
			}
			if err := m.V3.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdvisory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdvisory
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdvisory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *CVSSComponent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdvisory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CVSSComponent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CVSSComponent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdvisory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdvisory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdvisory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vector", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdvisory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdvisory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdvisory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vector = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Score = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipAdvisory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdvisory
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdvisory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *Reference) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdvisory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reference: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reference: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Link", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdvisory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdvisory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdvisory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Link = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdvisory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdvisory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdvisory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Source = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdvisory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdvisory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdvisory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdvisory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdvisory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdvisory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdvisory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdvisory
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdvisory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *Affect) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdvisory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Affect: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Affect: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vendor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdvisory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdvisory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdvisory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vendor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Product", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdvisory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdvisory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdvisory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Product = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdvisory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdvisory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdvisory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdvisory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdvisory
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdvisory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func skipAdvisory(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAdvisory
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAdvisory
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAdvisory
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAdvisory
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthAdvisory
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAdvisory
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAdvisory(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthAdvisory
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAdvisory = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAdvisory   = fmt.Errorf("proto: integer overflow")
)
