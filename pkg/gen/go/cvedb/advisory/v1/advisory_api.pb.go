// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cvedb/advisory/v1/advisory_api.proto

package advisoryv1

import (
	bytes "bytes"
	context "context"
	fmt "fmt"
	io "io"
	math "math"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type SearchRequest struct {
	Limit                uint64   `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Cursor               string   `protobuf:"bytes,2,opt,name=cursor,proto3" json:"cursor,omitempty"`
	Sorts                []string `protobuf:"bytes,3,rep,name=sorts,proto3" json:"sorts,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SearchRequest) Reset()         { *m = SearchRequest{} }
func (m *SearchRequest) String() string { return proto.CompactTextString(m) }
func (*SearchRequest) ProtoMessage()    {}
func (*SearchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c8825218b7a322e, []int{0}
}

func (m *SearchRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *SearchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SearchRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *SearchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchRequest.Merge(m, src)
}

func (m *SearchRequest) XXX_Size() int {
	return m.Size()
}

func (m *SearchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SearchRequest proto.InternalMessageInfo

func (m *SearchRequest) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *SearchRequest) GetCursor() string {
	if m != nil {
		return m.Cursor
	}
	return ""
}

func (m *SearchRequest) GetSorts() []string {
	if m != nil {
		return m.Sorts
	}
	return nil
}

type SearchResponse struct {
	NextCursor           string      `protobuf:"bytes,1,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
	PreviousCursor       string      `protobuf:"bytes,2,opt,name=previous_cursor,json=previousCursor,proto3" json:"previous_cursor,omitempty"`
	Advisories           []*Advisory `protobuf:"bytes,3,rep,name=advisories,proto3" json:"advisories,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *SearchResponse) Reset()         { *m = SearchResponse{} }
func (m *SearchResponse) String() string { return proto.CompactTextString(m) }
func (*SearchResponse) ProtoMessage()    {}
func (*SearchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c8825218b7a322e, []int{1}
}

func (m *SearchResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *SearchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SearchResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *SearchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchResponse.Merge(m, src)
}

func (m *SearchResponse) XXX_Size() int {
	return m.Size()
}

func (m *SearchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SearchResponse proto.InternalMessageInfo

func (m *SearchResponse) GetNextCursor() string {
	if m != nil {
		return m.NextCursor
	}
	return ""
}

func (m *SearchResponse) GetPreviousCursor() string {
	if m != nil {
		return m.PreviousCursor
	}
	return ""
}

func (m *SearchResponse) GetAdvisories() []*Advisory {
	if m != nil {
		return m.Advisories
	}
	return nil
}

func init() {
	proto.RegisterType((*SearchRequest)(nil), "cvedb.advisory.v1.SearchRequest")
	proto.RegisterType((*SearchResponse)(nil), "cvedb.advisory.v1.SearchResponse")
}

func init() {
	proto.RegisterFile("cvedb/advisory/v1/advisory_api.proto", fileDescriptor_1c8825218b7a322e)
}

var fileDescriptor_1c8825218b7a322e = []byte{
	// 361 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0xc1, 0x4a, 0xc3, 0x30,
	0x18, 0xc7, 0xc9, 0xa6, 0x83, 0x65, 0x38, 0x5d, 0x11, 0x19, 0x13, 0x6a, 0x1d, 0x82, 0xbb, 0x98,
	0xd2, 0x79, 0xf4, 0xb4, 0xed, 0xe4, 0x41, 0x18, 0x1d, 0x0c, 0x91, 0xc1, 0x68, 0xbb, 0xd8, 0x05,
	0xdc, 0x52, 0x93, 0xb4, 0x38, 0x8f, 0xbe, 0x84, 0x77, 0x4f, 0xe2, 0x93, 0x88, 0x27, 0x1f, 0x41,
	0xfb, 0x14, 0x1e, 0xa5, 0x49, 0x33, 0x1c, 0x53, 0x6f, 0xdf, 0xff, 0x9f, 0xdf, 0xf7, 0xcf, 0x97,
	0x7c, 0xf0, 0x28, 0x48, 0xf0, 0xc4, 0xb7, 0xbd, 0x49, 0x42, 0x38, 0x65, 0x0b, 0x3b, 0x71, 0x96,
	0xf5, 0xd8, 0x8b, 0x08, 0x8a, 0x18, 0x15, 0xd4, 0xa8, 0x49, 0x0a, 0xe9, 0x13, 0x94, 0x38, 0x0d,
	0xeb, 0xef, 0x46, 0xd5, 0xd4, 0x38, 0x09, 0x89, 0x98, 0xc6, 0x3e, 0x0a, 0xe8, 0xcc, 0x0e, 0x69,
	0x48, 0x6d, 0x69, 0xfb, 0xf1, 0xb5, 0x54, 0x52, 0xc8, 0x4a, 0xe1, 0xcd, 0x01, 0xdc, 0x1a, 0x60,
	0x8f, 0x05, 0x53, 0x17, 0xdf, 0xc6, 0x98, 0x0b, 0x63, 0x17, 0x6e, 0xde, 0x90, 0x19, 0x11, 0x75,
	0x60, 0x81, 0xd6, 0x86, 0xab, 0x84, 0xb1, 0x07, 0x4b, 0x41, 0xcc, 0x38, 0x65, 0xf5, 0x82, 0x05,
	0x5a, 0x65, 0x37, 0x57, 0x19, 0xcd, 0x29, 0x13, 0xbc, 0x5e, 0xb4, 0x8a, 0xad, 0xb2, 0xab, 0x44,
	0xf3, 0x11, 0xc0, 0xaa, 0x4e, 0xe5, 0x11, 0x9d, 0x73, 0x6c, 0x1c, 0xc0, 0xca, 0x1c, 0xdf, 0x89,
	0x71, 0x9e, 0x02, 0x64, 0x0a, 0xcc, 0xac, 0x9e, 0x4a, 0x3a, 0x86, 0xdb, 0x11, 0xc3, 0x09, 0xa1,
	0x31, 0x1f, 0xaf, 0x5c, 0x55, 0xd5, 0x76, 0x0e, 0x9e, 0x41, 0x98, 0x3f, 0x99, 0x60, 0x75, 0x6f,
	0xa5, 0xbd, 0x8f, 0xd6, 0xbe, 0x0a, 0x75, 0xf2, 0xda, 0xfd, 0x81, 0xb7, 0x47, 0xb0, 0xa2, 0xfd,
	0x4e, 0xff, 0xdc, 0xb8, 0x80, 0x25, 0x35, 0xa7, 0x61, 0xfd, 0x92, 0xb0, 0xf2, 0x31, 0x8d, 0xc3,
	0x7f, 0x08, 0xf5, 0xc8, 0xee, 0x03, 0xf8, 0xfa, 0x34, 0xc1, 0x73, 0x6a, 0x82, 0xd7, 0xd4, 0x04,
	0xef, 0xa9, 0x09, 0x3e, 0x52, 0x13, 0x40, 0x93, 0xb2, 0x10, 0xdd, 0xe3, 0x39, 0x11, 0x53, 0x8f,
	0xad, 0xa7, 0x74, 0x77, 0x96, 0x23, 0x45, 0xa4, 0x9f, 0x6d, 0xa5, 0x0f, 0xae, 0xf4, 0xd0, 0x8b,
	0xc4, 0x79, 0x2a, 0x14, 0x7b, 0x9d, 0xcb, 0x97, 0x42, 0xad, 0x27, 0x3b, 0x35, 0x8c, 0x86, 0xce,
	0x5b, 0xee, 0x8d, 0xb4, 0x37, 0x1a, 0x3a, 0x7e, 0x49, 0x2e, 0xf6, 0xf4, 0x3b, 0x00, 0x00, 0xff,
	0xff, 0xca, 0x97, 0x59, 0x8e, 0x64, 0x02, 0x00, 0x00,
}

func (this *SearchRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SearchRequest)
	if !ok {
		that2, ok := that.(SearchRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	if this.Cursor != that1.Cursor {
		return false
	}
	if len(this.Sorts) != len(that1.Sorts) {
		return false
	}
	for i := range this.Sorts {
		if this.Sorts[i] != that1.Sorts[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}

func (this *SearchResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SearchResponse)
	if !ok {
		that2, ok := that.(SearchResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NextCursor != that1.NextCursor {
		return false
	}
	if this.PreviousCursor != that1.PreviousCursor {
		return false
	}
	if len(this.Advisories) != len(that1.Advisories) {
		return false
	}
	for i := range this.Advisories {
		if !this.Advisories[i].Equal(that1.Advisories[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AdvisoryAPIClient is the client API for AdvisoryAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AdvisoryAPIClient interface {
	// Search for advisories in the database.
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
}

type advisoryAPIClient struct {
	cc *grpc.ClientConn
}

func NewAdvisoryAPIClient(cc *grpc.ClientConn) AdvisoryAPIClient {
	return &advisoryAPIClient{cc}
}

func (c *advisoryAPIClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, "/cvedb.advisory.v1.AdvisoryAPI/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdvisoryAPIServer is the server API for AdvisoryAPI service.
type AdvisoryAPIServer interface {
	// Search for advisories in the database.
	Search(context.Context, *SearchRequest) (*SearchResponse, error)
}

func RegisterAdvisoryAPIServer(s *grpc.Server, srv AdvisoryAPIServer) {
	s.RegisterService(&_AdvisoryAPI_serviceDesc, srv)
}

func _AdvisoryAPI_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdvisoryAPIServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cvedb.advisory.v1.AdvisoryAPI/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdvisoryAPIServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AdvisoryAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cvedb.advisory.v1.AdvisoryAPI",
	HandlerType: (*AdvisoryAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Search",
			Handler:    _AdvisoryAPI_Search_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cvedb/advisory/v1/advisory_api.proto",
}

func (m *SearchRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Limit != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAdvisoryApi(dAtA, i, uint64(m.Limit))
	}
	if len(m.Cursor) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAdvisoryApi(dAtA, i, uint64(len(m.Cursor)))
		i += copy(dAtA[i:], m.Cursor)
	}
	if len(m.Sorts) > 0 {
		for _, s := range m.Sorts {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SearchResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.NextCursor) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAdvisoryApi(dAtA, i, uint64(len(m.NextCursor)))
		i += copy(dAtA[i:], m.NextCursor)
	}
	if len(m.PreviousCursor) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAdvisoryApi(dAtA, i, uint64(len(m.PreviousCursor)))
		i += copy(dAtA[i:], m.PreviousCursor)
	}
	if len(m.Advisories) > 0 {
		for _, msg := range m.Advisories {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintAdvisoryApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintAdvisoryApi(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}

func NewPopulatedSearchRequest(r randyAdvisoryApi, easy bool) *SearchRequest {
	this := &SearchRequest{}
	this.Limit = uint64(uint64(r.Uint32()))
	this.Cursor = string(randStringAdvisoryApi(r))
	v1 := r.Intn(10)
	this.Sorts = make([]string, v1)
	for i := 0; i < v1; i++ {
		this.Sorts[i] = string(randStringAdvisoryApi(r))
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedAdvisoryApi(r, 4)
	}
	return this
}

func NewPopulatedSearchResponse(r randyAdvisoryApi, easy bool) *SearchResponse {
	this := &SearchResponse{}
	this.NextCursor = string(randStringAdvisoryApi(r))
	this.PreviousCursor = string(randStringAdvisoryApi(r))
	if r.Intn(10) != 0 {
		v2 := r.Intn(5)
		this.Advisories = make([]*Advisory, v2)
		for i := 0; i < v2; i++ {
			this.Advisories[i] = NewPopulatedAdvisory(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedAdvisoryApi(r, 4)
	}
	return this
}

type randyAdvisoryApi interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneAdvisoryApi(r randyAdvisoryApi) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}

func randStringAdvisoryApi(r randyAdvisoryApi) string {
	v3 := r.Intn(100)
	tmps := make([]rune, v3)
	for i := 0; i < v3; i++ {
		tmps[i] = randUTF8RuneAdvisoryApi(r)
	}
	return string(tmps)
}

func randUnrecognizedAdvisoryApi(r randyAdvisoryApi, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldAdvisoryApi(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}

func randFieldAdvisoryApi(dAtA []byte, r randyAdvisoryApi, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateAdvisoryApi(dAtA, uint64(key))
		v4 := r.Int63()
		if r.Intn(2) == 0 {
			v4 *= -1
		}
		dAtA = encodeVarintPopulateAdvisoryApi(dAtA, uint64(v4))
	case 1:
		dAtA = encodeVarintPopulateAdvisoryApi(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateAdvisoryApi(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateAdvisoryApi(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateAdvisoryApi(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}

func encodeVarintPopulateAdvisoryApi(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}

func (m *SearchRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Limit != 0 {
		n += 1 + sovAdvisoryApi(uint64(m.Limit))
	}
	l = len(m.Cursor)
	if l > 0 {
		n += 1 + l + sovAdvisoryApi(uint64(l))
	}
	if len(m.Sorts) > 0 {
		for _, s := range m.Sorts {
			l = len(s)
			n += 1 + l + sovAdvisoryApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SearchResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NextCursor)
	if l > 0 {
		n += 1 + l + sovAdvisoryApi(uint64(l))
	}
	l = len(m.PreviousCursor)
	if l > 0 {
		n += 1 + l + sovAdvisoryApi(uint64(l))
	}
	if len(m.Advisories) > 0 {
		for _, e := range m.Advisories {
			l = e.Size()
			n += 1 + l + sovAdvisoryApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovAdvisoryApi(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}

func sozAdvisoryApi(x uint64) (n int) {
	return sovAdvisoryApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}

func (m *SearchRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdvisoryApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdvisoryApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cursor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdvisoryApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdvisoryApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdvisoryApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cursor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sorts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdvisoryApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdvisoryApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdvisoryApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sorts = append(m.Sorts, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdvisoryApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdvisoryApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdvisoryApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *SearchResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdvisoryApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextCursor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdvisoryApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdvisoryApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdvisoryApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextCursor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousCursor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdvisoryApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdvisoryApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdvisoryApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreviousCursor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Advisories", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdvisoryApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdvisoryApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdvisoryApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Advisories = append(m.Advisories, &Advisory{})
			if err := m.Advisories[len(m.Advisories)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdvisoryApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdvisoryApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdvisoryApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func skipAdvisoryApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAdvisoryApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAdvisoryApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAdvisoryApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAdvisoryApi
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthAdvisoryApi
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAdvisoryApi
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAdvisoryApi(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthAdvisoryApi
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAdvisoryApi = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAdvisoryApi   = fmt.Errorf("proto: integer overflow")
)
